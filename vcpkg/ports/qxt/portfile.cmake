vcpkg_from_github(
    OUT_SOURCE_PATH SOURCE_PATH
    REPO drescherjm/libqxt-cmake
    REF 9d534ea3024bb03413a2f64b152569d240ed3bdc # or use a specific tag/commit
    SHA512 b044c66e3a031261bda833bc33c3580c1f15fde3e2dabda41383abfba5384d8795d2796ee5e629c03707ff5a6f4943bec650a466bf956dee8cd73851ff9f9013 # Replace with the actual sha512 generated by vcpkg hash
)

set(CONFIGURE_OPTIONS)

if("qt5" IN_LIST FEATURES AND "qt6" IN_LIST FEATURES)
    message(FATAL_ERROR "Features 'qt5' and 'qt6' cannot be used together.")
elseif("qt5" IN_LIST FEATURES)
    list(APPEND CONFIGURE_OPTIONS -DSELECT_QT_VERSION="Qt5")
elseif("qt6" IN_LIST FEATURES)
    list(APPEND CONFIGURE_OPTIONS -DSELECT_QT_VERSION="Qt6")
else()
    message(FATAL_ERROR "Either 'qt5' or 'qt6' must be enabled.")
endif()

vcpkg_configure_cmake(
    SOURCE_PATH ${SOURCE_PATH}
    PREFER_NINJA
    OPTIONS ${CONFIGURE_OPTIONS}
)

vcpkg_cmake_build()
vcpkg_cmake_install()

# Fixup cmake config locations and paths. This is essential for vcpkg to setup the SimpleLibraryExampleConfig.cmake file 
# and setup each configuration for multiconfig generators like Visual Studio 2022. 
# Remember that vcpkg builds the Debug and Release config then maps the other configs: MinSizeRel, RelWithDebInfo to
# use the binaries created for the Release config. 
vcpkg_cmake_config_fixup(PACKAGE_NAME libQxt CONFIG_PATH lib/cmake/libQxt)

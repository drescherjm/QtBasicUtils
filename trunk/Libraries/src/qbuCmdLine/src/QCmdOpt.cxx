#include "QCmdOpt.h"

namespace QTUTILS {

/////////////////////////////////////////////////////////////////////////////////////////

QCmdOpt::QCmdOpt(QString strName,QString strDescription, QString strExplanation) : 
 QNamedCmdPart(strName,strDescription,strExplanation)
{

}

/////////////////////////////////////////////////////////////////////////////////////////

QCmdOpt::QCmdOpt( const QCmdOpt & other ) : QNamedCmdPart(other)
{
copy(other);
}

/////////////////////////////////////////////////////////////////////////////////////////

QCmdOpt::~QCmdOpt()
{

}

/////////////////////////////////////////////////////////////////////////////////////////

bool QCmdOpt::isExtendedOption()
{
	return (m_strName.length() > 1);
}

/////////////////////////////////////////////////////////////////////////////////////////

QString QCmdOpt::GetShortSyntax()
{
	QString retVal;
	if (!isExtendedOption()) {
		retVal = GetName()+ getValueDescription();
	}
	else
	{
		retVal = GetName() + "="+getValueDescription();
	}
	return retVal;
}
/////////////////////////////////////////////////////////////////////////////////////////

QString QCmdOpt::exportOptionName()
{
	QString retVal;
	if (!isExtendedOption()) {
		retVal = "-" + GetName();
	}
	else
	{
		retVal = "--" + GetName() + "=";
	}
	return retVal;		
}
/////////////////////////////////////////////////////////////////////////////////////////

QCmdOpt& QCmdOpt::operator=( const QCmdOpt & other )
{
	QNamedCmdPart::operator =(other);

	if ( &other != this ) {
		destroy();
		copy(other);
	}
	return (*this);
}
/////////////////////////////////////////////////////////////////////////////////////////

void QCmdOpt::copy( const QCmdOpt & other )
{

}

/////////////////////////////////////////////////////////////////////////////////////////

void QCmdOpt::destroy()
{

}

/////////////////////////////////////////////////////////////////////////////////////////

}; //namespace QTUTILS

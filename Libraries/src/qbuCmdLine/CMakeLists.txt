myproject(qbuCmdLine)

init_lib_shared_static_option(OFF)

set (${LOCAL_PROJECT_NAME}_VERSION_MAJOR 1)
set (${LOCAL_PROJECT_NAME}_VERSION_MINOR 0)

set (${LOCAL_PROJECT_NAME}_INSTALL_INCLUDE  ${CMAKE_INSTALL_PREFIX}/Include )
set (${LOCAL_PROJECT_NAME}_INSTALL_LIB_PATH ${CMAKE_INSTALL_PREFIX}/lib )
set (${LOCAL_PROJECT_NAME}_INSTALL_RELEASE_LIB ${LOCAL_PROJECT_NAME} )
set (${LOCAL_PROJECT_NAME}_INSTALL_DEBUG_LIB ${LOCAL_PROJECT_NAME}${CMAKE_DEBUG_POSTFIX} )

set (${LOCAL_PROJECT_NAME}_TREE_INCLUDE  ${${PROJECT_NAME}_SRC_INCLUDE_DIR}/${LOCAL_PROJECT_NAME} )
set (${LOCAL_PROJECT_NAME}_TREE_LIB_PATH ${CMAKE_CURRENT_SOURCE_DIR}/lib )
set (${LOCAL_PROJECT_NAME}_TREE_RELEASE_LIB ${LOCAL_PROJECT_NAME} )
set (${LOCAL_PROJECT_NAME}_TREE_DEBUG_LIB ${LOCAL_PROJECT_NAME}${CMAKE_DEBUG_POSTFIX} )

SET( ${LOCAL_PROJECT_NAME}_SRCS
	./src/QCmd.cxx
	./src/QCmdLine.cxx
	./src/QCmdPart.cxx
	./src/QCmdOpt.cxx
	./src/QCmdHelpException.cxx
	./src/QCmdParseException.cxx
	./src/QCmdParseError.cxx
	./src/QCmdOptBool.cxx
	./src/QCmdOptQChar.cxx
	./src/QCmdOptQString.cxx
	./src/QCmdOptQStringList.cxx
	./src/QCmdArg.cxx
	./src/QCmdArgBool.cxx
	./src/QCmdArgQChar.cxx
	./src/QCmdArgQString.cxx
	./src/QCmdArgQStringList.cxx
	./src/QCmdArgFileList.cxx
	./src/QCmdLineFileList.cxx
	./src/QCmdHelp.cxx
	./src/QNamedCmdPart.cxx
	./src/qbuCmdWaitForAnyKey.cxx
)

SET( ${LOCAL_PROJECT_NAME}_EXT_HDRS 
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdLine.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdExtra.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdParseError.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdHelpException.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdParseException.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdLineFileList.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdPart.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QNamedCmdPart.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdArg.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdOpt.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdOptBasicBase.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdOptBasicBase.txx
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdOptBasicBaseMM.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdOptBasicBaseMM.txx
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdOptBasic.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdOptBasic.txx
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdOptBool.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdOptQChar.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdOptQString.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdOptQStringList.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdArgBool.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdArgBasic.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdArgBasic.txx
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdArgBasicBase.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdArgBasicBase.txx
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdArgBasicBaseMM.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdArgBasicBaseMM.txx
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdArgQChar.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdArgQString.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdArgQStringList.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdArgFileList.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmdHelp.h
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/qbuCmdWaitForAnyKey.h
)

SET( ${LOCAL_PROJECT_NAME}_MOC_HDRS 
	${${LOCAL_PROJECT_NAME}_TREE_INCLUDE}/QCmd.h
)

# some .ui files
SET( ${LOCAL_PROJECT_NAME}_UIS
)

# and finally an resource file
SET( ${LOCAL_PROJECT_NAME}_RCS
)

SET( ${LOCAL_PROJECT_NAME}_INT_HDRS

)

#Add precompiled header support
#MSVC_PCH_SUPPORT(${LOCAL_PROJECT_NAME})

# this command will generate rules that will run rcc on all files from UPMC_LA_RCS
# in result UPMC_LA_RC_SRCS variable will contain paths to files produced by rcc
QT45_ADD_RESOURCES( ${LOCAL_PROJECT_NAME}_RC_SRCS ${${LOCAL_PROJECT_NAME}_RCS} )

# and finally this will run moc:
QT45_WRAP_CPP( ${LOCAL_PROJECT_NAME}_MOC_SRCS ${${LOCAL_PROJECT_NAME}_MOC_HDRS} )

# this will run uic on .ui files:
QT45_WRAP_UI( ${LOCAL_PROJECT_NAME}_UI_HDRS ${${LOCAL_PROJECT_NAME}_UIS} )

SOURCE_GROUP("Generated" FILES
	  ${${LOCAL_PROJECT_NAME}_RC_SRCS}
	  ${${LOCAL_PROJECT_NAME}_MOC_SRCS}
	  ${${LOCAL_PROJECT_NAME}_UI_HDRS}
)

SOURCE_GROUP("Resources" FILES
	  ${${LOCAL_PROJECT_NAME}_UIS}
	  ${${LOCAL_PROJECT_NAME}_RCS}
)

IF(BUILD_DOCUMENTATION)

ADD_TO_DOC(${CMAKE_CURRENT_SOURCE_DIR})
ADD_TO_DOC(${CMAKE_CURRENT_SOURCE_DIR}/src)
ADD_TO_DOC(${CMAKE_CURRENT_SOURCE_DIR}/Include)

ENDIF(BUILD_DOCUMENTATION)

include_directories( 
	${CMAKE_CURRENT_SOURCE_DIR} 
	${PROJECT_BINARY_DIR} 
	${PROJECT_BINARY_DIR}/.. 
	${${PROJECT_NAME}_INCLUDE_DIRS}
)

add_library(${LOCAL_PROJECT_NAME} ${${LOCAL_PROJECT_NAME}_SHARED}
	${${LOCAL_PROJECT_NAME}_SRCS} 
	${${LOCAL_PROJECT_NAME}_EXT_HDRS} 
	${${LOCAL_PROJECT_NAME}_MOC_HDRS}
	${${LOCAL_PROJECT_NAME}_MOC_SRCS} 
	${${LOCAL_PROJECT_NAME}_INT_HDRS} 
	${${LOCAL_PROJECT_NAME}_UI_HDRS}
	${${LOCAL_PROJECT_NAME}_RC_SRCS}
)

add_library(${${PROJECT_NAME}_LIBRARY_PREFIX}::${LOCAL_PROJECT_NAME} ALIAS ${LOCAL_PROJECT_NAME})

target_precompile_headers(${LOCAL_PROJECT_NAME} PUBLIC "${LOCAL_PROJECT_NAME}PCH.h")

target_link_libraries(${LOCAL_PROJECT_NAME} PUBLIC ${${PROJECT_NAME}_LIBRARY_PREFIX}::qbuBase)

set_target_properties(${LOCAL_PROJECT_NAME} PROPERTIES FOLDER Libraries)

install (TARGETS ${LOCAL_PROJECT_NAME} DESTINATION lib)
install (FILES ${${LOCAL_PROJECT_NAME}_EXT_HDRS} ${${LOCAL_PROJECT_NAME}_MOC_HDRS} DESTINATION include)

set (${PROJECT_NAME}_LIBRARIES ${${PROJECT_NAME}_LIBRARIES} ${LOCAL_PROJECT_NAME} PARENT_SCOPE)

